class Solution {
    public static int recur(int index , int cap , int[] val , int[] wt , int[][] dp) {
        if(index == 0) {
            if(cap >= wt[index])
               return val[index];
            else
               return 0;
        }
        if(dp[index][cap] != -1)
           return dp[index][cap];
        int notTake = recur(index - 1 , cap , val , wt , dp);
        int take = 0;
        if(cap >= wt[index]){
            take = val[index] + recur(index - 1 , cap - wt[index] , val , wt , dp);
        }
        return dp[index][cap] = Math.max(notTake , take);
    }
    // Function to return max value that can be put in knapsack of capacity.
    static int knapSack(int capacity, int val[], int wt[]) {
        // code here
        int n = val.length;
        int[][] dp = new int[n][capacity + 1];
        for(int i = 0; i < n; i++){
            for(int j = 0; j <= capacity; j++){
                dp[i][j] = -1;
            }
        }
            
        return recur(n - 1, capacity , val , wt , dp);
    }
}
